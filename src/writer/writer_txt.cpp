/******************************************************************************

    ATPGK - An automated test pattern generator for integrated circuit

    Copyright (C) 2023-2024 Hugo Brisset & Gabriel Levy

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or 
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    Contact: hugo.brisset@proton.me / gabriel.levy@skiff.com

******************************************************************************/

#include "../../include/writer/writer_txt.hpp"

WriterTXT::WriterTXT(std::string _filename, std::string _filetype) : Writer(_filename, _filetype) {};

void WriterTXT::formatFile(std::shared_ptr<Tree> tree) {
    addLineToFile("Generated by ATPGK v1.0\n");
    addLineToFile("Source file : " + tree->srcName);
    std::time_t currentDate = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
    std::string currentDateString = std::ctime(&currentDate);
    addLineToFile("\nGeneration date : " + currentDateString);
};

void WriterTXT::writeIOPort(std::shared_ptr<Tree> tree) {
    addLineToFile("Input list :");
    for (const auto& input_port : tree->InputList) {
        std::string lineContent = "\tName : " + input_port->getName() + " ; Id : " + std::to_string(input_port->getIdentifier());
        addLineToFile(lineContent);
    }

    addLineToFile("\nOutput list :");
    for (const auto& output_port : tree->OutputList) {
        std::string lineContent = "\tName : " + output_port->getName() + " ; Id : " + std::to_string(output_port->getIdentifier());
        addLineToFile(lineContent);
    }
};

void WriterTXT::writeVectors(std::shared_ptr<std::vector<std::pair<std::vector<std::pair<std::shared_ptr<Node>, int>> , std::vector<std::pair<std::shared_ptr<Node>, int>>>>> vectors_test) {
    int a = 0;

    addLineToFile("\n\n------------- Generated vectors -------------\n");

    for (const auto& pair : *vectors_test) {
        a++;
        std::map<std::string, int> input_vector;
        std::map<std::string, int> output_vector;
        std::string vector_line = "Vector nb." + std::to_string(a);
        vector_line += "\n\t";

        for (const auto& input_bit : pair.first) {
            input_vector[input_bit.first->getName()] = input_bit.second;
        }

        for (const auto& output_bit : pair.second) {
            output_vector[output_bit.first->getName()] = output_bit.second;
        }

        for (const auto& bit : input_vector) {
            vector_line += bit.first;
            vector_line += " : ";
            vector_line += std::to_string(bit.second);
            vector_line += " ; ";
        }

        for (const auto& bit : output_vector) {
            vector_line += bit.first;
            vector_line += " : ";
            vector_line += std::to_string(bit.second);
            vector_line += " ; ";
        }

        vector_line += "\n";

        addLineToFile(vector_line);
    }
};

void WriterTXT::writeCovStats(shared_ptr<vector<array<int, 2>>> faultCount, shared_ptr<vector<tuple<shared_ptr<Fault>, string, string>>> failureFault) {
    addLineToFile("Tested Faults :\n");
    for (int i=0; i < faultCount->size(); ++i) {
        std::string lineContent = " - " + getFaultAlias(static_cast<FaultModelType>(i)) + " : ";
        lineContent += to_string((*faultCount)[i][0] - (*faultCount)[i][1]);
        lineContent += "/";
        lineContent += to_string((*faultCount)[i][0]);

        // If all the fault of this type are not covered
        if ((*faultCount)[i][1] != 0) {
            for (int j=0; j < failureFault->size(); ++j) {
                if (static_cast<int>(std::get<0>((*failureFault)[j])->getType()) == i) {
                    lineContent += "\n\tCell name : ";
                    lineContent += std::get<1>((*failureFault)[j]);
                    lineContent += " ; Reason : ";
                    lineContent += std::get<2>((*failureFault)[j]);
                }
            }
            lineContent += "\n";
        }

        addLineToFile(lineContent);
    }
}