/******************************************************************************

    ATPGK - An automated test pattern generator for integrated circuit

    Copyright (C) 2023-2024 Hugo Brisset & Gabriel Levy

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or 
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    Contact: hugo.brisset@proton.me / gabriel.levy@skiff.com

******************************************************************************/

#include "../../include/writer/writer_json.hpp"

WriterJSON::WriterJSON(std::string _filename, std::string _filetype) : Writer(_filename, _filetype) {};

void WriterJSON::formatFile(std::shared_ptr<Tree> tree) {
    addLineToFile("{\n\t\"Creator\": \"Generated by ATPGK v1.0\",\n");
    addLineToFile("\t\"Source_file\": \"" + tree->srcName + "\",\n");
    std::time_t currentDate = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
    std::string currentDateString = std::ctime(&currentDate);
    currentDateString.pop_back();
    addLineToFile("\t\"Generation_date\": \"" + currentDateString + "\",\n");
};

void WriterJSON::endFile() {
    addLineToFile("}");
};

void WriterJSON::writeIOPort(std::shared_ptr<Tree> tree) {
    addLineToFile("\t\"Input_list\": {");
    std::string lineContent = "";
    for (const auto& input_port : tree->InputList) {
        lineContent += "\t\t\"" + input_port->getName() + "\": {\n\t\t\t\"Id\": \"" + std::to_string(input_port->getIdentifier()) + "\"\n\t\t},\n";
    }
    lineContent.pop_back(); lineContent.pop_back();
    lineContent += "\n\t},\n";
    addLineToFile(lineContent);

    addLineToFile("\t\"Output_list\": {");
    lineContent = "";
    for (const auto& output_port : tree->OutputList) {
        lineContent += "\t\t\"" + output_port->getName() + "\": {\n\t\t\t\"Id\": \"" + std::to_string(output_port->getIdentifier()) + "\"\n\t\t},\n";
    }
    lineContent.pop_back(); lineContent.pop_back();
    lineContent += "\n\t},\n";
    addLineToFile(lineContent);
};

void WriterJSON::writeVectors(std::shared_ptr<std::vector<std::pair<std::vector<std::pair<std::shared_ptr<Node>, int>> , std::vector<std::pair<std::shared_ptr<Node>, int>>>>> vectors_test) {
    int a = 0;
    std::string vector_line = "\t\"Vectors\": {";
    
    for (const auto& pair : *vectors_test) {
        a++;
        std::map<std::string, int> input_vector;
        std::map<std::string, int> output_vector;
        vector_line += "\n\t\t\"" + std::to_string(a) + "\": {\n";

        for (const auto& input_bit : pair.first) {
            input_vector[input_bit.first->getName()] = input_bit.second;
        }

        for (const auto& output_bit : pair.second) {
            output_vector[output_bit.first->getName()] = output_bit.second;
        }

        vector_line += "\t\t\t\"Input_bits\": {\n\t\t\t\t";
        for (const auto& bit : input_vector) {
            vector_line += "\"" + bit.first + "\": " + std::to_string(bit.second) + ",";
        }
        vector_line.pop_back();
        vector_line += "\n\t\t\t},";

        vector_line += "\n\t\t\t\"Output_bits\": {\n\t\t\t\t";
        for (const auto& bit : output_vector) {
            vector_line += "\"" + bit.first + "\": " + std::to_string(bit.second) + ",";
        }
        vector_line.pop_back();
        vector_line += "\n\t\t\t}\n";

        vector_line += "\t\t},";        
    }
    vector_line.pop_back();
    vector_line += "\n\t}";
    addLineToFile(vector_line);

    endFile();
};

void WriterJSON::writeCovStats(shared_ptr<vector<array<int, 2>>> faultCount, shared_ptr<vector<tuple<shared_ptr<Fault>, string, string>>> failureFault) {
    addLineToFile("\t\"Tested_faults\": {");
    for (int i=0; i < faultCount->size(); ++i) {
        std::string lineContent = "\n\t\t\"" + getFaultAlias(static_cast<FaultModelType>(i)) + "\": {\n";
        lineContent += "\t\t\t\"number\": \"";
        lineContent += to_string((*faultCount)[i][0]);
        lineContent += "\",\n\t\t\t\"failure\": \"";
        lineContent += to_string((*faultCount)[i][1]);
        lineContent += "\",\n\t\t\t\"gates_in_failure\": [ ";

        // If all the fault of this type are not covered
        if ((*faultCount)[i][1] != 0) {
            for (int j=0; j < failureFault->size(); ++j) {
                if (static_cast<int>(std::get<0>((*failureFault)[j])->getType()) == i) {
                    lineContent += "\n\t\t\t\t{\n\t\t\t\t\t\"gate_name\": \"";
                    lineContent += std::get<1>((*failureFault)[j]);
                    lineContent += "\",\n\t\t\t\t\t\"reason\": \"";
                    lineContent += std::get<2>((*failureFault)[j]);
                    lineContent += "\"\n\t\t\t\t},";
                }
            }
            lineContent.pop_back();
            lineContent += "\n\t\t\t";
        }

        lineContent += "]\n\t\t},";

        if (i == (faultCount->size())-1) {
            lineContent.pop_back();
        }
        addLineToFile(lineContent);
    }
    addLineToFile("\t}\n}");
}